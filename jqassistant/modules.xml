<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.0">

    <concept id="modules:DeclaredModules">
        <requiresConcept refId="module-api:Module"/>
        <requiresConcept refId="module-spi:Module"/>
        <requiresConcept refId="module-impl:Module"/>
        <requiresConcept refId="module-neo4j:Module"/>
        <requiresConcept refId="module-inject:Module"/>
        <requiresConcept refId="module-json:Module"/>
        <description>Returns all modules, i.e. all packages labeled with MODULE.</description>
        <cypher><![CDATA[
			MATCH
				(package:MODULE)
			RETURN
				package
			ORDER BY
			    package.FQN
        ]]></cypher>
    </concept>

    <concept id="modules:API">
        <description>Labels all .api packages as API.</description>
        <cypher><![CDATA[
			MATCH
				(apiPackage:PACKAGE)
			WHERE
				apiPackage.NAME = "api"
			SET
			    apiPackage:API
			RETURN
				apiPackage
        ]]></cypher>
    </concept>

    <concept id="modules:Implementation">
        <description>Labels all .impl packages as IMPLEMENTATION.</description>
        <cypher><![CDATA[
			MATCH
				(implementationPackage:PACKAGE)
			WHERE
				implementationPackage.NAME = "impl"
			SET
			    implementationPackage:IMPLEMENTATION
			RETURN
				implementationPackage
        ]]></cypher>
    </concept>

    <concept id="modules:PackagesPerModule">
        <requiresConcept refId="modules:DeclaredModules"/>
        <description>Return the number of packages per module.</description>
        <cypher><![CDATA[
            MATCH
                (module:PACKAGE:MODULE)-[:CONTAINS*0..]->(p:PACKAGE)
            RETURN
                module, COUNT(p) as packages
            ORDER BY
                packages DESC, module.FQN ASC
        ]]></cypher>
    </concept>

    <concept id="modules:TypesPerModule">
        <requiresConcept refId="modules:DeclaredModules"/>
        <description>Return the number of types (i.e. classes, interfaces, enumerations and annotations) per module.</description>
        <cypher><![CDATA[
            MATCH
                (module:PACKAGE:MODULE)-[:CONTAINS*0..]->(p:PACKAGE),
                (p)-[:CONTAINS]->(t:TYPE)
            RETURN
                module, COUNT(t) as types
            ORDER BY
                types DESC, module.FQN ASC
        ]]></cypher>
    </concept>

    <constraint id="modules:UnknownModules">
        <requiresConcept refId="modules:DeclaredModules"/>
        <description>Every child package of "com.buschmais.cdo" must be labeled as MODULE.</description>
        <cypher><![CDATA[
			MATCH
				(rootPackage:PACKAGE)-[:CONTAINS]->(modulePackage:PACKAGE)
			WHERE
				rootPackage.FQN = "com.buschmais.cdo"
				AND NOT
				  modulePackage:MODULE
			RETURN
				modulePackage as UndeclaredModule
        ]]></cypher>
    </constraint>

    <constraint id="modules:ApiMustNotDependOnImplementation">
        <requiresConcept refId="modules:API"/>
        <requiresConcept refId="modules:Implementation"/>
        <description>API packages must not have dependencies to implementation packages.</description>
        <cypher><![CDATA[
            MATCH
                (a:PACKAGE:API)-[:CONTAINS*0..]->(p1:PACKAGE),
                (i:PACKAGE:IMPLEMENTATION)-[:CONTAINS*0..]->(p2:PACKAGE),
                (p1)-[:DEPENDS_ON]->(p2)
            RETURN
                p1 as api, COLLECT(p2.FQN) as implementation
            ORDER BY
                p1.FQN
        ]]></cypher>
    </constraint>

    <constraint id="modules:ModuleMustDependOnApiOfOtherModule">
        <requiresConcept refId="modules:API"/>
        <requiresConcept refId="modules:DeclaredModules"/>
        <description>A module must only have dependencies to API packages of other modules.</description>
        <cypher><![CDATA[
            MATCH
                r1=(module:PACKAGE:MODULE)-[:CONTAINS*0..]->(p1:PACKAGE),
                r2=(otherModule:PACKAGE:MODULE)-[:CONTAINS*0..]->(p2:PACKAGE),
                (p1)-[:DEPENDS_ON]->(p2)
            WHERE
                module<>otherModule
                AND NONE (p IN NODES(r2) WHERE p:API)
            RETURN
              p1 as dependent,
              COLLECT(p2.FQN) as dependencies
            ORDER BY
              p1.FQN
        ]]></cypher>
    </constraint>

</jqa:jqassistant-rules>